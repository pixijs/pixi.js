// Generated by CoffeeScript 1.6.3
var SteeredVehicle,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

SteeredVehicle = (function(_super) {
  __extends(SteeredVehicle, _super);

  SteeredVehicle.prototype.maxForce = 1;

  SteeredVehicle.prototype.steeringForce = null;

  SteeredVehicle.prototype.arrivalThreshold = 100;

  SteeredVehicle.prototype.wanderAngle = 0;

  SteeredVehicle.prototype.wanderDistance = 10;

  SteeredVehicle.prototype.wanderRadius = 5;

  SteeredVehicle.prototype.wanderRange = 1;

  SteeredVehicle.prototype.pathIndex = 0;

  SteeredVehicle.prototype.pathThreshold = 20;

  SteeredVehicle.prototype.avoidDistance = 300;

  SteeredVehicle.prototype.avoidBuffer = 20;

  SteeredVehicle.prototype.inSightDist = 200;

  SteeredVehicle.prototype.tooCloseDist = 60;

  function SteeredVehicle(texture) {
    this.steeringForce = new PIXI.Point();
    SteeredVehicle.__super__.constructor.call(this, texture);
  }

  SteeredVehicle.prototype.update = function() {
    this.steeringForce.truncate(this.maxForce);
    this.steeringForce.divide(this.mass);
    this.velocity.add(this.steeringForce);
    this.steeringForce = new PIXI.Point();
    return SteeredVehicle.__super__.update.call(this);
  };

  SteeredVehicle.prototype.seek = function(target) {
    var desiredVelocity;
    desiredVelocity = target.clone();
    desiredVelocity.subtract(this.position);
    desiredVelocity.normalize();
    desiredVelocity.multiply(this.maxSpeed);
    desiredVelocity.subtract(this.velocity);
    return this.steeringForce.add(desiredVelocity);
  };

  SteeredVehicle.prototype.flee = function(target) {
    var desiredVelocity;
    desiredVelocity = target.clone();
    desiredVelocity.subtract(this.position);
    desiredVelocity.normalize();
    desiredVelocity.multiply(this.maxSpeed);
    desiredVelocity.subtract(this.velocity);
    return this.steeringForce.subtract(desiredVelocity);
  };

  SteeredVehicle.prototype.wander = function() {
    var center, force, offset;
    center = this.velocity.clone();
    center.normalize();
    center.multiply(this.wanderDistance);
    offset = new PIXI.Point;
    offset.length = this.wanderRadius;
    offset.angle = this.wanderAngle;
    this.wanderAngle += Math.random() * this.wanderRange - (this.wanderRange * .5);
    force = center.clone();
    force.add(offset);
    return this.steeringForce.add(force);
  };

  SteeredVehicle.prototype.flock = function(vehicles, startindex) {
    var averagePosition, averageVelocity, i, inSightCount, s, vehicle, _i, _len;
    averageVelocity = this.velocity.clone();
    averagePosition = new PIXI.Point();
    inSightCount = 0;
    i = 0;
    for (_i = 0, _len = vehicles.length; _i < _len; _i++) {
      vehicle = vehicles[_i];
      if (i <= startindex) {
        i++;
        continue;
      }
      i++;
      if (vehicle !== this && this.inSight(vehicle)) {
        averageVelocity.add(vehicle.velocity);
        averagePosition.add(vehicle.position);
        if (this.tooClose(vehicle)) {
          this.flee(vehicle.position);
        }
        inSightCount++;
      }
    }
    if (inSightCount > 0) {
      averageVelocity.divide(inSightCount);
      averagePosition.divide(inSightCount);
      this.seek(averagePosition);
      s = averageVelocity.clone();
      s.subtract(this.velocity);
      return this.steeringForce.add(s);
    }
  };

  SteeredVehicle.prototype.inSight = function(vehicle) {
    var difference, dotProd, heading;
    if (this.position.dist(vehicle.position) > this.inSightDist) {
      return false;
    }
    heading = this.velocity.clone();
    heading.normalize();
    difference = vehicle.position.clone();
    difference.subtract(this.position);
    dotProd = difference.dotProd(heading);
    if (dotProd < 0) {
      return false;
    }
    return true;
  };

  SteeredVehicle.prototype.tooClose = function(vehicle) {
    return this.position.dist(vehicle.position) < this.tooCloseDist;
  };

  return SteeredVehicle;

})(Vehicle);
